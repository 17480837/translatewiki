#!/bin/bash
set -e

DIRSCRIPT="`dirname \"$0\"`"
DIRSCRIPT="`( cd \"$DIRSCRIPT\" && pwd )`"
DIRLOG=/home/betawiki/logs/repo
PROJECT=$1
WIKI=/www/translatewiki.net/w

DIR=$2
: ${DIR:=`pwd`}
source $DIRSCRIPT/findexportroot
cd "$DIR"

echo "$(date --rfc-3339=seconds --utc) [$(whoami) at $DIR] $0 $@" >> $DIRLOG

gitupdate() {
	local dir=$1
	cd $dir
	git fetch -q --all
	if [ -z "$2" ]
	then
		git reset -q --hard origin/master
	else
		git reset -q --hard origin/$2
	fi
	git clean -q -f -d
	git pull -q
	cd ..
}

cloneGerritRepo() {
	local url=$1
	local name=$2

	git clone "$url" "$name"

	if [ "$REPO_RW" = "yes" ]
	then
		cd "$name"

		git config user.name 'Translation updater bot'
		git config user.email 'l10n-bot@translatewiki.net'
		git config gitreview.username 'l10n-bot'

		if [ ! -e ".gitreview" ]
		then
			git remote add -f gerrit "$url"
		fi

		git review -s

		cd ..
	fi
}

# Ugly. Eventually, I think we should end up with a file similar to
# mediawiki-defines.txt where we can simply add a line like this:
#   repo=https://gerrit.wikimedia.org/r/p/oojs/ui.git
# and then things magically happen based on the other configuration
# settings.
processHacks() {
	if [ ! -d "oojs-ui/.git" ]
	then
		cloneGerritRepo "https://gerrit.wikimedia.org/r/p/oojs/ui.git" "oojs-ui"
	fi

	if [ ! -d "VisualEditorVisualEditor/.git" ]
	then
		cloneGerritRepo "https://gerrit.wikimedia.org/r/p/VisualEditor/VisualEditor.git" "VisualEditorVisualEditor"
	fi
}

GITUPDATEPROJECTS="\
commons-android \
commons-ios \
eol \
europeana \
freecol \
fuel \
huggle \
intuition \
jquery.uls \
kiwix \
mathjax
nfcring-control \
pywikibot \
vicuna \
waymarked-trails-site \
wikimania \
wikipedia-android \
wikipedia-ios \
WikipediaMobile \
WikipediaMobileJ2ME \
WikisourceMobile \
WiktionaryMobile"

for i in $GITUPDATEPROJECTS; do
	if [ "$i" = "$PROJECT" ]
	then
		gitupdate "$PROJECT"
		exit 0
	fi
done

if [ "$PROJECT" = "blockly" ]
then
	svn up -q $PROJECT

elif [ "$PROJECT" = "etherpad-lite" ]
then
	gitupdate "$PROJECT" $REPO_ETHERPADLITE_BRANCH

elif [ "$PROJECT" = "fudforum" ]
then
	svn up -q $PROJECT

elif [ "$PROJECT" = "ihris" ]
then
	cd $PROJECT
	for MODULE in $REPO_IHRIS_MODULES
	do
		cd $MODULE
		bzr pull -q
		cd ..
	done

elif [ "$PROJECT" = "mantis" ]
then
	gitupdate "$PROJECT" $REPO_MANTIS_BRANCH

elif [ "$PROJECT" = "mifos" ]
then
	gitupdate "$PROJECT" develop

elif [ "$PROJECT" = "mediawiki" ]
then
	if [ -z "$REPO_MEDIAWIKI_BRANCHES" ]
	then echo "Add REPO_MEDIAWIKI_BRANCHES to REPOCONF"; exit 1
	fi

	cd $PROJECT
	for BRANCH in $REPO_MEDIAWIKI_BRANCHES
	do
		if [ ! -d "$BRANCH" ]
		then
			echo "$BRANCH not yet present. Cloning..."
			git clone "$REPO_MEDIAWIKI" "$BRANCH" -b "$BRANCH"
			if [ "$REPO_RW" = "yes" ]
			then
				cd "$BRANCH"
				git config user.name 'Translation updater bot'
				git config user.email 'l10n-bot@translatewiki.net'
				git config gitreview.username 'l10n-bot'
				git review -s
			fi
		else
			cd "$BRANCH"
			git fetch -q --all
			git reset -q --hard "origin/$BRANCH"
			git clean -q -f -d
		fi
		cd ..
	done
	cd ..

	wait
	if [ "$DIR" = "/resources/projects" ]
	then
		sudo -u betawiki php "$WIKI/extensions/Translate/scripts/createMessageIndex.php" --quiet || ${DIRSCRIPT}/udpcast Message index creation failed &
	fi

elif [ "$PROJECT" = "mediawiki-extensions" ]
then
	if [ -z "$REPO_MWEXTGIT" ]
	then echo "Add REPO_MWEXTGIT to REPOCONF"; exit 1
	fi

	cd $PROJECT
	cd extensions

	EXTENSIONS=$(curl -s "https://gerrit.wikimedia.org/mediawiki-extensions.txt"|egrep -v "(FundraisingEmailUnsubscribe|DataValuesCommon|ShortUrlApi)")

	# Clone extension repos that do not exist yet.
	for EXTENSION in $EXTENSIONS
	do
		if [ ! -d "$EXTENSION/.git" ]
		then
			echo "Cloning $EXTENSION"
			cloneGerritRepo "$REPO_MWEXTGIT/$EXTENSION.git" "$EXTENSION"
		fi
	done

	# This is where I disappoint Niklas a bit more...
	processHacks
	EXTENSIONS="$EXTENSIONS VisualEditorVisualEditor oojs-ui"

	# Update all repos (yes, there is duplication for repos that were just cloned)
	echo $EXTENSIONS |
		xargs -n1 -P7 ${DIRSCRIPT}/update-reset-repo "$DIR/$PROJECT/extensions"

	if [ -z "$REPO_RW" ]
	then
		sudo -u betawiki php "$WIKI/extensions/Translate/scripts/processMessageChanges.php" --quiet --group=ext-* && echo "Please check https://translatewiki.net/wiki/Special:ManageMessageGroups"
		sudo -u betawiki php "$WIKI/extensions/Translate/scripts/createMessageIndex.php" --quiet || ${DIRSCRIPT}/udpcast Message index creation failed &
	fi

elif [ "$PROJECT" = "mwlib" ]
then
	if [ "$REPO_RW" = "yes" ]
	then
		gitupdate "$PROJECT"
	fi

	gitupdate "mwlib.rl"

elif [ "$PROJECT" = "nocc" ]
then
	svn up -q $PROJECT

elif [ "$PROJECT" = "openimages" ]
then
	svn up -q $PROJECT

elif [ "$PROJECT" = "osm" ]
then
	gitupdate "$PROJECT"
	gitupdate "potlatch2"

elif [ "$PROJECT" = "wikia" ]
then
	gitupdate "$PROJECT" $REPO_WIKIA_BRANCH

elif [ "$PROJECT" = "wikiblame" ]
then
	svn up -q $PROJECT

else
	echo "`basename $0`: Unknown project"
	exit 1
fi
