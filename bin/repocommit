#!/bin/bash
set -e

DIRSCRIPT="`dirname \"$0\"`"
DIRSCRIPT="`( cd \"$DIRSCRIPT\" && pwd )`"
DIRLOG=/home/betawiki/logs/repo

PROJECT=$1
DIR=$2
: ${DIR:=`pwd`}
source ${DIRSCRIPT}/findexportroot
cd "$DIR"

echo "$(date --rfc-3339=seconds --utc) [$(whoami) at $DIR] $0 $@" >> ${DIRLOG}

COMMITMSG="Localisation updates from https://translatewiki.net."


gitCommit() {
	local dir=$1
	cd "$dir"
	git add .
	git commit -m "$COMMITMSG"

    # Check if $2 is set. If not, push to origin master
	if [[ -z "$2" ]]
	then
	    git push origin master
	else
	    git push origin $2
    fi

	cd ..
}

gitCommitGerrit() {
	local dir=$1
	cd $PROJECT
	git add .
	git commit -q -m "$COMMITMSG" && git fetch -q gerrit && git review -t l10n || :
	mergeL10n-bot
	cd ..
}

mergeL10n-bot() {
	for i in `ssh l10n-bot@gerrit.wikimedia.org -p 29418 gerrit query --format=TEXT owner:l10n-bot status:open |grep "  url:" |cut -d/ -f5`
	do
		echo "Merging ${i}..."
		ssh l10n-bot@gerrit.wikimedia.org -p 29418 gerrit review $i,1 --code-review 2 --verified 2 --submit
	done
}

# TODO: Move to separate file?
GITPROJECTS="\
blockly \
eol \
europeana \
freecol \
fuel \
huggle \
intuition \
jquery.uls \
kiwix \
mantis \
mathjax \
nfcring-control \
osm \
vicuna \
waymarked-trails-site \
WikipediaMobile \
WikipediaMobileJ2ME \
WikisourceMobile \
WiktionaryMobile"

for i in $GITPROJECTS; do
	if [ "$i" = "$PROJECT" ]
	then
		gitCommit "$PROJECT"

		if [ "$PROJECT" = "blockly" ]
		then
			gitCommit blockly-games
		fi

		if [ "$PROJECT" = "osm" ]
		then
			gitCommit potlatch2
		fi

		exit 0
	fi
done

# TODO: Move to separate file?
GERRITPROJECTS="\
pywikibot \
wikimania \
wikipedia-android \
wikipedia-ios"

for i in $GERRITPROJECTS; do
	if [ "$i" = "$PROJECT" ]
	then
		gitCommitGerrit "$PROJECT"
		exit 0
	fi
done

if [ "$PROJECT" = "etherpad-lite" ]
then
    gitCommit "$PROJECT" develop

elif [ "$PROJECT" = "fudforum" ]
then
	cd $PROJECT
	svn add -q --force *
	for i in `find . -name msg`
	do
		svn propset -q svn:mime-type text/plain $i
		svn propset -q svn:eol-style native $i
	done
	svn commit --message "$COMMITMSG"
	cd ..

elif [ "$PROJECT" = "ihris" ]
then
	cd $PROJECT
	for MODULE in $REPO_IHRIS_MODULES
	do
		cd $MODULE
		bzr add .
		bzr commit -m "$COMMITMSG"
		cd ..
	done

elif [ "$PROJECT" = "mediawiki" ]
then
	if [ -z "$REPO_MEDIAWIKI_BRANCHES" ]
	then echo "Add REPO_MEDIAWIKI_BRANCHES to REPOCONF"; exit 1
	fi

	cd $PROJECT
	for BRANCH in $REPO_MEDIAWIKI_BRANCHES
	do
		cd "$BRANCH"
		git add .
		git commit -m "$COMMITMSG" && git fetch gerrit && git review -t l10n || :
		cd ..
	done
	cd ..

elif [ "$PROJECT" = "mediawiki-extensions" ]
then
	cd $PROJECT/extensions
	for i in `ls`
	do
		echo "--> $i"
		cd $i
		git add .
		git commit -m "$COMMITMSG" && git fetch gerrit && git review -t l10n || :
		cd ..
	done

	cd ../..

	mergeL10n-bot

elif [ "$PROJECT" = "mediawiki-skins" ]
then
	cd $PROJECT
	for i in `ls`
	do
		echo "--> $i"
		cd $i
		git add .
		git commit -m "$COMMITMSG" && git fetch gerrit && git review -t l10n || :
		cd ..
	done

	cd ..

	mergeL10n-bot

elif [ "$PROJECT" = "mifos" ]
then
    gitCommit "$PROJECT" develop

elif [ "$PROJECT" = "nocc" ]
then
	cd $PROJECT
	svn add --force * --auto-props --parents --depth infinity -q
	svn commit --message "$COMMITMSG"
	cd ..

elif [ "$PROJECT" = "openimages" ]
then
	cd $PROJECT
	svn add -q --force *.properties
	svn propset -q svn:mime-type text/plain *.properties
	svn propset -q svn:eol-style native *.properties
	svn commit --message "$COMMITMSG"
	cd ..

elif [ "$PROJECT" = "wikiblame" ]
then
	cd $PROJECT
	svn add -q --force *.php
	svn propset -q svn:eol-style native *.php
	svn commit --message "$COMMITMSG"
	cd ..

elif [ "$PROJECT" = "wikiblame" ]
then
    gitCommit "$PROJECT" dev

else
	echo "`basename $0`: Unknown project"
	exit 1
fi
